class Solution:
    def dfs(self, image, sr, sc, color, initial):
        
        if sr < 0 or sc < 0 or sr >= len(image) or sc >= len(image[0]): #check the bounds for the image
            return 
        
        if initial != image[sr][sc]: #if the current grid block is not the original colour, meaning do not do anything to it
            return 
        
        image[sr][sc] = color #change the current grid block to the new colour 
        # call recursion on all four blocks 
        self.dfs(image, sr+1, sc, color, initial)
        self.dfs(image, sr-1, sc, color, initial)
        self.dfs(image, sr, sc+1, color, initial)
        self.dfs(image, sr, sc-1, color, initial)
        
    def floodFill(self, image: List[List[int]], sr: int, sc: int, color: int) -> List[List[int]]:
        # if not an image
        if not image:
            return image 

        # if the image is equal to the new colour
        if image[sr][sc] == color:
            return image
        
        # otherwise, call dfs
        self.dfs(image, sr, sc, color, image[sr][sc])
        return image

    