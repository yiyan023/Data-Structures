#O(n^2) solution -- not efficient enough
class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        profit = 0

        for i in range(len(prices)):
            for j in range(i+1, len(prices)):
                if prices[j] - prices[i] > profit:
                    profit = prices[j] - prices[i]

        return profit

# O(N) solution -- much more efiicient 
class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        maxProfit = 0
        l = 0 #left pointer - represents buy
        r = 1 #right pointer - represents sell

        while r < len(prices):
            if prices[l] < prices[r]:
                profit = prices[r] - prices[l]
                maxProfit = max(maxProfit, profit)
            else:
                l = r #if r < l, then we found a new min -- so replace the buy pointer 
            r += 1 #always increment the value of r by 1 to see if the maxProfit changes

        return maxProfit